Functional Programming

Functional programming concentrates on four constructs:

1.Data (numbers, strings, etc)
2.Variables (function arguments)
3.Functions
4.Function Applications (evaluating functions given arguments and/or data)

library(purr):  groups of functions that are essential for functional programming,mostly data structure and functions

Map
Functions applied to data structure← list/vector
In the purrr package
the map() : a list, map_lgl():logical values, map_chr():strings , and map_dbl():numbers

Example:
library(purrr)

map_chr(c(5, 4, 3, 2, 1), function(x){
  c("one", "two", "three", "four", "five")[x]
})
[1] "five"  "four"  "three" "two"   "one"  

map_lgl(c(1, 2, 3, 4, 5), function(x){
  x > 3
})
[1] FALSE FALSE FALSE  TRUE  TRUE

map_if(): 1.a list or vector containing data 2.a predicate function 3.a function to be applied
   
   ##even numbers are squared, while the odd numbers are left alone.
map_if(1:5, function(x){                                       a list
              x %% 2 == 0                                      a predicate function: If true→apply to next funtion
            },                                                                       If false→not apply
            function(y){                                       a function to be applied
              y^2
            }) %>% unlist()
[1]  1  4  3 16  5

map_at():作用于specified index in vectors
  ##在第1,3,5项上面减10
map_at(seq(100, 500, 100), c(1, 3, 5), function(x){             seq(100,500,100):100-500,间隔为100
  x - 10
}) %>% unlist()
[1]  90 200 290 400 490

map2(arg1,arg2,function)：length(arg1)=length(arg2)

map2_chr(letters, 1:26, paste)
 [1] "a 1"  "b 2"  "c 3"  "d 4"  "e 5"  "f 6"  "g 7"  "h 8"  "i 9"  "j 10"
[11] "k 11" "l 12" "m 13" "n 14" "o 15" "p 16" "q 17" "r 18" "s 19" "t 20"
[21] "u 21" "v 22" "w 23" "x 24" "y 25" "z 26"

pmap():map across any number of lists

pmap_chr(list(
  list(1, 2, 3),
  list("one", "two", "three"),
  list("uno", "dos", "tres")
), paste)
[1] "1 one uno"    "2 two dos"    "3 three tres"

Reduce:循环
  ##Where mapping returns a vector or a list, reducing should return a single value.
  
reduce(c(1, 3, 5, 7), function(x, y){
  message("x is ", x)
  message("y is ", y)
  message("")
  x + y
})
x is 1
y is 3

x is 4
y is 5

x is 9
y is 7

[1] 16

reduce(letters[1:4], function(x, y){                               reduce_right()倒过来→从最后一个开始
  message("x is ", x)                                              dcba
  message("y is ", y)
  message("")
  paste0(x, y)
})
x is a
y is b

x is ab
y is c

x is abc
y is d

[1] "abcd"

Search:

contains(letters, "a")                                    letters:abcdefghijklmn......
[1] TRUE

detect(a vector,a predict function): returns to the first TRUE element

detect(20:40, function(x){                                detect_index(a vector,a predict function):
  x > 22 && x %% 2 == 0                                   returns to the first TRUE element index.
})
[1] 24                                                            [1] 5

Filter: keep(), discard(),every(), and some() 
a vector and a predicate function

keep(1:20, function(x){
  x %% 2 == 0
})
 [1]  2  4  6  8 10 12 14 16 18 20
 
 compose(arg1,arg2,arg3,...):把他们一层一层组成一个大function
 
 n_unique <- compose(length, unique)
 ## actually equals to 
  n_unique <- function(x){
   length(unique(x))
  }
  
rep(1:5, 1:5)
[1] 1 2 2 3 3 3 4 4 4 4 5 5 5 5 5

n_unique(rep(1:5, 1:5))
[1]  5
